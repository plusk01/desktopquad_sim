<!-- This spawns an MAV and runs all nodes associated with the MAV -->

<launch>
  <arg name="mav_name"            default="mav0"/>
  <arg name="model_name"          default="chiny"/>
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file"            default="$(arg mav_name)" />
  <arg name="color"               default="White"/>
  <arg name="x"                   default="0"/>
  <arg name="y"                   default="0"/>
  <arg name="z"                   default="0.2"/>
  <arg name="yaw"                 default="0"/>

  <group ns="$(arg mav_name)">
    <!-- Spawn in Gazebo -->
    <include file="$(find fcu_sim)/launch/spawn_mav.launch">
      <arg name="mav_name"            value="$(arg mav_name)" />
      <arg name="model"               value="$(find desktopquad_sim)/agents/$(arg model_name)/$(arg model_name).xacro" />
      <arg name="x"                   value="$(arg x)"/>
      <arg name="y"                   value="$(arg y)"/>
      <arg name="z"                   value="$(arg z)"/>
      <arg name="yaw"                 value="$(arg yaw)"/>
      <arg name="color"               value="$(arg color)"/>
    </include>

    <!-- Load common parameters (mass, thrust, rotor configuration) -->
    <rosparam command="load" file="$(find desktopquad_sim)/agents/$(arg model_name)/$(arg model_name).yaml"/>

    <!-- Is Flying Publisher -->
    <node pkg="rostopic" type="rostopic" name="is_flying_pub" args="pub is_flying std_msgs/Bool true"/>

    <!-- Estimator -->
    <!-- <rosparam command="load" file="$(find ros_copter)/params/mekf.yaml" ns="estimator"/>
    <node name="estimator" pkg="ros_copter" type="mekf" output="screen">
      <param name="euler_integration_steps" value="20"/>
    </node>-->

    <!-- AprilTags VO -->
    <node name="apriltagvo" pkg="apriltagvo" type="apriltagvo" output="screen">
      <param name="show_output_video" value="true" />
      <remap from="input_image" to="camera/rgb" />
    </node>

    <!-- PID Position Controller -->
    <rosparam command="load" file="$(find desktopquad_sim)/agents/$(arg model_name)/$(arg model_name)_controller.yaml" ns="controller"/>
    <node name="controller" pkg="ros_copter" type="controller" output="screen">
      <remap from="estimate" to="ground_truth/odometry"/>
    </node>

    <!-- Waypoint Manager -->
    <node name="waypoint_manager" pkg="ros_copter" type="waypoint_manager.py" output="screen">
      <rosparam command="load" file="$(find desktopquad_sim)/params/waypoints.yaml"/>
      <remap from="waypoint" to="high_level_command"/>
      <remap from="state" to="ground_truth/odometry"/>
    </node>

  </group>

</launch>